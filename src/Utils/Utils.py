import math
import sys

import numpy as np

from src.Functions.AbstractFunction import AbstractFunction
from src.Utils.Point import Point, PointCollection


def readPoint(file_name: str) -> PointCollection:
    file = open(file_name, 'r')
    pointlist = PointCollection()
    for line in file:
        try:
            points = line.split()
            if len(points) != 2:
                continue
            if points[0] == "0":
                continue
            point: Point = Point(float(points[0]), float(points[1]))
            pointlist.append(point)
        except Exception:

            continue

    # __less_twelve_points(pointlist)
    return pointlist


def toFixed(numObj, digits=2):
    try:
        return f"{numObj:.{digits}f}"
    except Exception:
        return numObj


def getMin_Max_of_points(points: PointCollection):
    point = points[0]
    min = max = point.x
    for point in points:
        if max < point.x:
            max = point.x
        if min > point.x:
            min = point.x

    return min, max


'''
    –º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∞–Ω—Ç–∞ 
    
    | a  b  c |
    | d  e  f | = -i * b * d + b * f * g + c * d * h - a * f * h + i * a * e - c * g * e
    | g  h  i |
'''


def get_determinant(a, b, c, d, e, f, g, h, i):
    return -i * b * d + b * f * g + c * d * h - a * f * h + i * a * e - c * g * e


'''–ß–µ–º –±–ª–∏–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ ùëÖ^2 –∫ –µ–¥–∏–Ω–∏—Ü–µ (ùëÖ^2 ‚Üí 1), —Ç–µ–º –Ω–∞–¥–µ–∂–Ω–µ–µ
—Ñ—É–Ω–∫—Ü–∏—è ùúë –∞–ø–ø—Ä–æ–∫—Å–∏–º–∏—Ä—É–µ—Ç –∏—Å—Å–ª–µ–¥—É–µ–º—ã–π –ø—Ä–æ—Ü–µ—Å—Å.'''


def approximation_reliability(points: PointCollection, fun: AbstractFunction):
    sum_phi = sum_sqr_phi = sum_y_phi = 0
    for point in points:
        sum_phi += fun.find(point.x)
        sum_sqr_phi += fun.find(point.x) * fun.find(point.x)
        sum_y_phi = pow(point.y - fun.find(point.x), 2)
    return 1 - sum_y_phi / (sum_sqr_phi - pow(sum_phi, 2) / len(points))


def userReader() -> PointCollection:
    print("–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –∂–µ–ª–∞–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ: —Ñ–∞–π–ª(1)/–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞(2)")
    while True:
        try:
            tmp = int(input())
            if tmp == 1 or tmp == 2:
                break
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        except Exception:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
    if tmp == 1:
        global file_name
        while True:
            try:
                print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞")
                file_name = input()
                points = readPoint(file_name)
                break
            except FileNotFoundError:
                print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É? (–¥–∞\–Ω–µ—Ç)")
                tmp = input()
                if tmp == "–Ω–µ—Ç":
                    print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                    sys.exit(-1)
        return readPoint(file_name)
    else:
        print("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ —Ç–æ—á–µ–∫ (–Ω–µ –º–µ–Ω—å—à–µ 12)")
        while True:
            tmp = 0
            try:
                tmp = int(input())
                if tmp >= 12:
                    break
                print("–Ω–µ –º–µ–Ω—å—à–µ 12 —Ç–æ—á–µ–∫")
            except Exception:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        print("–í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (X; Y))")
        count = 0
        points: PointCollection = []
        while count < tmp:
            try:
                tmp1 = input().split()
                x, y = float(tmp1[0]), float(tmp1[1])
                points.append(Point(x, y))
                count += 1
            except Exception:
                print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
                continue
        print("–ì–æ—Ç–æ–≤–æ")
        return points


def __less_twelve_points(points: PointCollection) -> None:
    if len(points) < 12:
        print("–¢–æ—á–µ–∫ –º–µ–Ω—å—à–µ 12. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç)")
        while True:
            tmp = input()
            if tmp == "–Ω–µ—Ç":
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
                sys.exit(-1)
            elif tmp == "–¥–∞":
                break
